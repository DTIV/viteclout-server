pragma soliditypp ^0.4.2;

contract VuilderToken {
   mapping(address => mapping(address => uint)) balances;
   mapping(address => bool) isMinted;
   mapping(address => uint) circulatingSupply;

   onMessage mint() {
      require(isMinted[msg.sender] == false, "Already minted");
      balances[msg.sender][msg.sender] = 1000;
      isMinted[msg.sender] = true;
   }

   getter getBalance(address vuilderAddress, address inquirer) returns(uint) {
      return balances[vuilderAddress][inquirer];
   }
   
   getter getCirculatingSupply(address vuilderAddress) returns(uint) {
      return circulatingSupply[vuilderAddress]; 
   }

   onMessage sendToken(
      address vuilderAddress, 
      address receiverAddress, 
      uint amount
   ) payable {
      require(balances[vuilderAddress][msg.sender] >= amount, "Insufficient tokens");

      bool isSenderVuilder = msg.sender == vuilderAddress;
      bool isReceiverVuilder = vuilderAddress == receiverAddress;

      balances[vuilderAddress][msg.sender] -= amount;
      balances[vuilderAddress][receiverAddress] += amount;

      if(isSenderVuilder && !isReceiverVuilder) {
         circulatingSupply[vuilderAddress] += amount;
      } else if(isReceiverVuilder && !isSenderVuilder) {
         circulatingSupply[vuilderAddress] -= amount;
      }
   }
}