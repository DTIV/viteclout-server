pragma soliditypp ^0.4.2;

contract VuilderToken {
   address public vuilder;
   mapping(address => uint) public balances;
   uint circulatingSupply = 0;
   uint decimals = 1000000000000000000;
   // uint paid = 0;

   constructor() public {
      vuilder = msg.sender;
      balances[vuilder] = 1000 * decimals;
   }

   getter getPrice(uint amount, address receiver, address sender) returns(uint) {
     if(circulatingSupply==0) {
         return (decimals * 3)/1000;
      }

      uint newCirculatingSupply = circulatingSupply;

      if(sender == vuilder && receiver!= vuilder) {
         newCirculatingSupply += amount;
      } else if(receiver == vuilder && sender != vuilder) {
         newCirculatingSupply -= amount;
      }

      return  (3 * (newCirculatingSupply)**2)/1000;
   }

   onMessage sendToken(address receiver, uint amount) payable {
      require(amount <= balances[msg.sender], "Insufficient balance");
      // Enforces the price of token
      require(msg.amount == _getPrice(amount, receiver, msg.sender));

      balances[msg.sender] -= amount;
      balances[receiver] += amount;

      if(msg.sender == vuilder && receiver!= vuilder) {
         circulatingSupply += amount;
      } else if(receiver == vuilder && msg.sender != vuilder) {
         circulatingSupply -= amount;
      }
   }

   getter getBalanceOf(address _address) returns(uint) {
      return balances[_address];
   }

   getter getCirculatingSupply() returns(uint) {
      return circulatingSupply;
   }

   function _getPrice(uint amount, address receiver, address sender) private returns(uint) {
      if(circulatingSupply==0) {
         return (decimals * 3)/1000;
      }

      uint newCirculatingSupply = circulatingSupply;

      if(sender == vuilder && receiver!= vuilder) {
         newCirculatingSupply += amount;
      } else if(receiver == vuilder && sender != vuilder) {
         newCirculatingSupply -= amount;
      }

      require(newCirculatingSupply !=0);

      return  (3 * (newCirculatingSupply)**2)/1000;
   }

   // onMessage pay() payable {
   //    paid = msg.amount;
   // }

   // getter getPaid() returns(uint) {
   //    return paid;
   // }
}